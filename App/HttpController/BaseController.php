<?php namespace App\HttpController;

use EasySwoole\EasySwoole\Config;
use EasySwoole\Http\AbstractInterface\Controller;

class BaseController extends Controller
{
    const PAGESIZE = 10;
    const PAGE_PARAM = 'page';
    const PAGESIEZE_PARAM = 'pagesize';
    const MAX_PAGESIZE = 100;

    protected $page = 0;
    protected $pagesize = null;

    protected $access = [];
    protected $filter = [];
    protected $params;
    protected $cookie;
    protected $header;

    protected function onRequest(?string $action): ?bool
    {
        $before = $this->beforeRun();
        if ($before !== true) {
            $this->writeJson(401,null,'请先登录');
            return false;
        }
        return $before;

        return parent::onRequest($action); // TODO: Change the autogenerated stub
    }

    public function beforeRun()
    {
        if (!$this->access()) {
            return false;
        }

        //params 若POST与GET存在同键名参数，则以GET为准
        $request = $this->request();
        $this->params = $request->getRequestParam();
        $this->params += $request->getQueryParams();
        $this->params += $request->getUploadedFile();
        $this->params += $request->getQueryParams();
        $this->params += $request->getParsedBody();
        $content = $request->getBody()->__toString();
        $this->params += json_decode($content, true);
        $this->header = $request->getHeaders();
        $this->cookie = $request->getCookieParams();

        return true;
     }

    public function afterAction(?string $actionName): void
    {
        parent::afterAction($actionName); // TODO: Change the autogenerated stub
    }

    protected function access()
    {
        $action = $this->getActionName();
        $access = isset($this->access[$action]) ? $this->access[$action] : (isset($this->access['*']) ? $this->access['*'] : null);
        if (!$access) {
            return false;
        }

        if (in_array('*', $access, true)) {
            return true;
        }

        //获取cookie 查看用户身份权限
        $instance = Config::getInstance();
        $cookie = $this->request()->getCookieParams($instance->getConf('COOKIE_NAME'));

        $role = $cookie ? $cookie : '?';

        if ($role !== '?') {
            var_dump($role);
        }

        if ($role == '?') {
            if (in_array($role, $access, true)) {
                return true;
            } else {
                return false;
            }
        } else {
            if (in_array('@', $access, true) || in_array($role, $access, true)) {
                return true;
            } else {
                return false;
            }
        }
    }

    public function params()
    {
        return $this->params;
    }
}